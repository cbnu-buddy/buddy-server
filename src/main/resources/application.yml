# 기본 설정
server:
  address: 0.0.0.0              # 모든 접속 허용
  port: 8080
  servlet:
    session:
      cookie:
        same-site: none

spring:
  servlet:
    multipart:
      enabled: true
      max-file-size: 10MB
      max-request-size: 10MB

  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/buddy?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=Asia/Seoul&characterEncoding=UTF-8
    username: root
    password: ${mysql-pwd}

  data:
    redis:
      host: localhost
      port: 6379

  sql.init.mode: always    # never / always

  jpa:
    defer-datasource-initialization: true
    hibernate:
      ddl-auto: update

    properties:
      hibernate:
        default_batch_fetch_size: 100
        format_sql: true                                    # sout으로 보기에 편안한 sql 출력
        dialect: org.hibernate.dialect.MySQL8Dialect        # mysql 방언
    open-in-view: false

  mail:
    default-encoding: UTF-8
    host: smtp.gmail.com
    port: 587
    username: buddyofficialemail@gmail.com
    password: jlms gzee bixp obdz
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
          ssl:
            trust: smtp.gmail.com
        debug: true
        mime:
          charset: UTF-8
          transport:
            protocol: smtp


#  mail:
#    host: smtp.naver.com          # 네이버 SMTP 호스트 주소
#    port: 465                     # 네이버 SMTP 포트
#    username: ${email-address}
#    password: ${email-pw}
#    properties:
#      mail.smtp.auth: true        # SMTP 서버와의 인증
#      mail.smtp.ssl.enable: true  # SSL 보안연결(필수)
#
# mail-secret-string : ${mail-secret-string}

jwt:
  header: Authorization
  secret: ${secret-key}
  access-exp-time: 7200000    # 2시간 7200000
  refresh-exp-time: 1209600000    # 14일



springdoc:
  api-docs:
    enabled: true
  swagger-ui:
    enabled: true
    display-request-duration: true

logging:
  level:
    org.hibernate.SQL: debug    # 하이버네이트가 생성하는 sql 로그로 출력
    org.hibernate.orm.jdbc.bind: debug    # 쿼리 파라미터 로그 남김
